const l = console.log
const config = require('../settings')
const { cmd, commands } = require('../lib/command')
const axios = require("axios");

cmd({
    pattern: "slanimeclub",    
    react: 'üìë',
    category: "movie",
    desc: "slanimeclub movie downloader",
    filename: __filename
},
async (conn, m, mek, { from, prefix, q, l, isDev, reply }) => {
    try {
        
        if (!q) return await reply(lang ? '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±..! üñäÔ∏è*' : '*Please Give Me Text..! üñäÔ∏è*');
    
        const data = await fetchJson(`${config.API}/api/slanimeclub/search?q=${q}&apikey=${config.APIKEY}`);
    
        if (data.data.data.data.length < 1) return await conn.sendMessage(from, { text: lang ? "*‡∂∏‡∂ß ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫ :(*" : "*No results found :(*" }, { quoted: mek });
    
        var srh = [];  
        for (var i = 0; i < data.data.data.data.length; i++) {
            srh.push({
                title: i + 1,
                description: `${data.data.data.data[i].title}|| 'N/A'}\n‚îÉ üîó Url: ${data.data.data.data[i].link}_\n‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`,
                rowId: prefix + 'slanime ' + data.data.data.data[i].link
            });
        }

        const sections = [{
            title: lang ? "_[slanimeclub ‡∂ë‡∂ö‡∑ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑è ‡∂á‡∂≠‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω]._" : "_[Result from slanimeclub.]_",
            rows: srh
        }];
        
        const listMessage = {
            text: ``,
            footer: config.FOOTER,
            title: lang ? 'slanimeclub ‡∂ë‡∂ö‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω üì≤' : 'Result from slanimeclub. üì≤',
            buttonText: '*üî¢ ‡∂¥‡∑Ñ‡∂≠ ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*' : '*üî¢ Reply below number*',
            sections
        };

        return await conn.replyList(from, listMessage ,{ quoted : mek });
    } catch (e) {
        reply(lang ? '*‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫ !!*' : '*ERROR !!*');
        l(e);
    }
});


cmd({
    pattern: "slanime",    
    react: 'üìë',
    category: "movie",
    desc: "slanimeclub movie downloader",
    filename: __filename
},
async (conn, m, mek, { from, prefix, q, l, isDev, reply }) => {
    try {
        const lang = config.LANG == 'SI';

        if (!q) return await reply(lang ? '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±..! üñäÔ∏è*' : '*Please Give Me Text..! üñäÔ∏è*');
    
        const data = await fetchJson(`${config.API}/api/slanimeclub/movie?url=${q}&apikey=${config.APIKEY}`);
    
        const cap = `${lang ? `*_‚òò ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä: ${data.data.data.moviedata.title}_*\n\n- *‡∂Ø‡∑í‡∂±‡∂∫:* ${data.data.data.moviedata.date}\n- *‡∂¢‡∂±‡∂¥‡∑ä‚Äç‡∂ª‡∑í‡∂∫:* ${data.data.data.moviedata.generous}\n\n*‚õèÔ∏è ‡∑É‡∑ò‡∂¢‡∑î ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä:* ${q}` : `*_‚òò Title: ${data.data.data.moviedata.title}_*\n\n- *Date:* ${data.data.data.moviedata.date}\n- *Generous* ${data.data.data.moviedata.generous}\n\n*‚õèÔ∏è Link:* ${q}`}`;

        if (data.data.data.moviedata.seasons.length < 1) return await conn.sendMessage(from, { text: lang ? "*‡∂∏‡∂ß ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫ :(*" : "*No results found :(*" }, { quoted: mek });

        var srh = [];  
        for (var i = 0; i < data.data.data.moviedata.seasons.length; i++) {
            srh.push({
                title: i + 1,
                description: `${data.data.data.moviedata.seasons[i].title} | ${data.data.data.moviedata.seasons[i].number} | ${data.data.data.moviedata.seasons[i].date}`,
                rowId: prefix + `slanimedl ${data.data.data.moviedata.seasons[i].link}|${data.data.data.moviedata.seasons[i].title}`
            });
        }

        const sections = [{
            title: lang ? "_[slanimeclub ‡∂ë‡∂ö‡∑ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑è ‡∂á‡∂≠‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω]._" : "_[Result from slanimeclub.]_",
            rows: srh
        }];
        
        const listMessage = {
            caption: cap,
            image : { url: data.data.data.moviedata.image },    
            footer: config.FOOTER,
            title: lang ? 'slanimeclub ‡∂ë‡∂ö‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω üì≤' : 'Result from slanimeclub. üì≤',
            buttonText: lang ? '*üî¢ ‡∂¥‡∑Ñ‡∂≠ ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*' : '*üî¢ Reply below number*',
            sections
        };

        return await conn.replyList(from, listMessage ,{ quoted : mek });
    } catch (e) {
        reply(lang ? '*‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫ !!*' : '*ERROR !!*');
        l(e);
    }
});


cmd({
    pattern: `slanimedl`,
    react: "üì•",
    dontAddCommandList: true,
    filename: __filename
}, async (conn, mek, m, { from, q, isDev, reply }) => {

    if (!isDev) return reply(config.LANG === 'en' ? '‚ö†Ô∏è *Contact owner to Activate your number to Premium user*' : '‚ö†Ô∏è *‡∂∂‡∑ú‡∂ß‡∑ä ‡∂á‡∂ö‡∑ä‡∂ß‡∑í‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂ú‡∑ê‡∂±‡∑í‡∂∏‡∂ß ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∑Ä‡∑ô‡∂≠ ‡∂¥‡∑í‡∑Ä‡∑í‡∑É‡∑ô‡∂±‡∑ä‡∂±*');

    if (!q) {
        return await reply(config.LANG === 'en' ? '*Please provide a direct URL!*' : '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±!*');
    }

    try {
        const mediaUrl = q.split("|")[0];
        const title = q.split("|")[1] || 'tdd_movie_dl_system';
        const data = await fetchJson(`${config.API}/api/slanimeclub/download?url=${mediaUrl}&apikey=${config.APIKEY}`);
        const dl_link = `${data.data.data.link}`;

        const msg = config.LANG === 'en' ? 'PLEASE WAIT.... DON\'T USE ANY COMMANDS üö´' : '‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ª‡∑î‡∂†‡∑í‡∂ö‡∂ª ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.... ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂±‡∑ú‡∂ö‡∂ª‡∂±‡∑ä‡∂± üö´';
        await conn.sendMessage(from, { text: msg });

        const loadingMessage = await conn.sendMessage(from, { text: config.LANG === 'en' ? 'UPLOADING' : '‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è' });

        const emojiMessages = [
            "UPLOADING ‚óè‚óã‚óã‚óã‚óã", "UPLOADING ‚óè‚óè‚óã‚óã‚óã", "UPLOADING ‚óè‚óè‚óè‚óã‚óã", "UPLOADING ‚óè‚óè‚óè‚óè‚óã", "UPLOADING ‚óè‚óè‚óè‚óè‚óè",
            "UPLOADING ‚óè‚óã‚óã‚óã‚óã", "UPLOADING ‚óè‚óè‚óã‚óã‚óã", "UPLOADING ‚óè‚óè‚óè‚óã‚óã", "UPLOADING ‚óè‚óè‚óè‚óè‚óã", "UPLOADING ‚óè‚óè‚óè‚óè‚óè",
            config.LANG === 'en' ? "UPLOADING YOUR MOVIE" : "‡∂î‡∂∂‡∂ú‡∑ö ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 500)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }

        if (dl_link.includes("https://slanimeclub.co")) {

            await conn.sendMessage(from, {
                document: {
                    url: dl_link
                },
                caption: `${title}\n\n${config.FOOTER}`,
                mimetype: "video/mp4",
                jpegThumbnail: await getThumbnailBuffer(config.LOGO),
                fileName: `${title}.mp4`
            });

            reply(config.LANG === 'en' ? 'SUCCESSFULLY UPLOADED YOUR MOVIE ‚úÖ' : '‡∂î‡∂∂‡∂ú‡∑ö ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª ‡∂á‡∂≠ ‚úÖ');
        }

        if (dl_link.includes("https://drive.google.com")) {
            let res = await GDriveDl(dl_link);
            await conn.sendMessage(from, {
                document: {
                    url: res.downloadUrl
                },
                caption: `${res.fileName}\n\n${config.FOOTER}`,
                mimetype: res.mimetype,
                jpegThumbnail: await getThumbnailBuffer(config.LOGO),
                fileName: `${res.fileName}.mp4`
            });

            reply(config.LANG === 'en' ? 'SUCCESSFULLY UPLOADED YOUR MOVIE ‚úÖ' : '‡∂î‡∂∂‡∂ú‡∑ö ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª ‡∂á‡∂≠ ‚úÖ');
        }

        await conn.sendMessage(from, { react: { text: '‚úÖ', key: mek.key } });
    } catch (error) {
        console.error('Error fetching or sending', error);
        await conn.sendMessage(from, config.LANG === 'en' ? '*Error fetching or sending*' : '*‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑Ñ‡∑ù ‡∂ë‡∑Ä‡∑ì‡∂∏*', { quoted: mek });
    }
});
