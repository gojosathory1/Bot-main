const l = console.log
const config = require('../settings')
const { cmd, commands } = require('../lib/command')
const axios = require("axios");

const { fetchJson } = require('../lib/function');
const { GDriveDl } = require('../lib/gdrive');

  // ‚úÖ Import Required Functions
// Ensure fetchJson, GDriveDl, getThumbnailBuffer, and config are imported in your main file

cmd({
    pattern: "slanimeclub",
    react: 'üìë',
    category: "movie",
    desc: "Search anime from slanimeclub",
    filename: __filename
}, async (conn, m, mek, { from, prefix, q, l, reply }) => {
    const lang = config.LANG === 'SI';
    try {
        if (!q) return await reply(lang ? '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±..! üñäÔ∏è*' : '*Please give me a search term..! üñäÔ∏è*');

        const data = await fetchJson(`${config.API}/api/slanimeclub/search?q=${q}&apikey=${config.APIKEY}`);
        if (!data.data?.data?.data?.length) {
            return conn.sendMessage(from, { text: lang ? "*‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂±‡∑ê‡∂≠ :(*" : "*No results found :(*" }, { quoted: mek });
        }

        const srh = data.data.data.data.map((anime, i) => ({
            title: `${i + 1}. ${anime.title}`,
            description: `üîó Url: ${anime.link}`,
            rowId: `${prefix}slanime ${anime.link}`
        }));

        const listMessage = {
            text: '',
            footer: config.FOOTER,
            title: lang ? 'üì≤ slanimeclub ‡∂ë‡∂ö‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω' : 'üì≤ Results from slanimeclub',
            buttonText: lang ? 'üî¢ ‡∂¥‡∑Ñ‡∂≠ ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±' : 'üî¢ Choose a number below',
            sections: [{
                title: lang ? '_[slanimeclub ‡∂ë‡∂ö‡∑ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑è ‡∂á‡∂≠‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω]_' : '_[Results from slanimeclub]_',
                rows: srh
            }]
        };

        return await conn.replyList(from, listMessage, { quoted: mek });
    } catch (e) {
        l(e);
        reply(lang ? '*‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫ !!*' : '*An error occurred !!*');
    }
});

cmd({
    pattern: "slanime",
    react: 'üìë',
    category: "movie",
    desc: "Get anime detail from slanimeclub",
    filename: __filename
}, async (conn, m, mek, { from, prefix, q, l, reply }) => {
    const lang = config.LANG === 'SI';
    try {
        if (!q) return await reply(lang ? '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±..! üñäÔ∏è*' : '*Please give me the anime URL..! üñäÔ∏è*');

        const data = await fetchJson(`${config.API}/api/slanimeclub/movie?url=${q}&apikey=${config.APIKEY}`);
        const movie = data.data?.data?.moviedata;

        if (!movie?.seasons?.length) {
            return conn.sendMessage(from, { text: lang ? "*‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂±‡∑ê‡∂≠ :(*" : "*No results found :(*" }, { quoted: mek });
        }

        const cap = lang
            ? `*_‚òò ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä: ${movie.title}_*\n\n- *‡∂Ø‡∑í‡∂±‡∂∫:* ${movie.date}\n- *‡∂¥‡∑ä‚Äç‡∂ª‡∂∑‡∑ö‡∂Ø‡∂∫:* ${movie.generous}\n\n*‚õèÔ∏è ‡∑É‡∑ò‡∂¢‡∑î ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä:* ${q}`
            : `*_‚òò Title: ${movie.title}_*\n\n- *Date:* ${movie.date}\n- *Genre:* ${movie.generous}\n\n*‚õèÔ∏è Link:* ${q}`;

        const rows = movie.seasons.map((season, i) => ({
            title: `${i + 1}. ${season.title}`,
            description: `${season.number} | ${season.date}`,
            rowId: `${prefix}slanimedl ${season.link}|${season.title}`
        }));

        const listMessage = {
            caption: cap,
            image: { url: movie.image },
            footer: config.FOOTER,
            title: lang ? 'üì≤ slanimeclub ‡∂ë‡∂ö‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª' : 'üì≤ Anime Details from slanimeclub',
            buttonText: lang ? 'üî¢ ‡∂¥‡∑Ñ‡∂≠ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±' : 'üî¢ Select from below',
            sections: [{
                title: lang ? '_[‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∑É‡∑Ñ season ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä]_' : '_[Anime details and season list]_',
                rows
            }]
        };

        return await conn.replyList(from, listMessage, { quoted: mek });
    } catch (e) {
        l(e);
        reply(lang ? '*‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫ !!*' : '*An error occurred !!*');
    }
});

cmd({
    pattern: `slanimedl`,
    react: "üì•",
    dontAddCommandList: true,
    filename: __filename
}, async (conn, mek, m, { from, q, isDev, reply }) => {
    const lang = config.LANG === 'SI';

    if (!isDev) return reply(lang ? '‚ö†Ô∏è *‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑í‡∂´‡∑î‡∂∏ Premium ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫‡∂ß ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î ‡∂Ö‡∂∏‡∂≠‡∂±‡∑ä‡∂±*' : '‚ö†Ô∏è *Contact owner to activate Premium for your number*');

    if (!q) return await reply(lang ? '*‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª season ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±*' : '*Please provide a valid season URL*');

    try {
        const [mediaUrl, title = 'slanime_download'] = q.split("|");

        const { data } = await fetchJson(`${config.API}/api/slanimeclub/download?url=${mediaUrl}&apikey=${config.APIKEY}`);
        const dl_link = data.data?.link;

        if (!dl_link) return reply(lang ? '*‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö*' : '*Failed to fetch download link*');

        await conn.sendMessage(from, { text: lang ? '‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±...' : 'Please wait, downloading...' });

        const uploading = await conn.sendMessage(from, { text: lang ? '‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä' : 'Uploading' });

        const steps = ["‚óè‚óã‚óã‚óã‚óã", "‚óè‚óè‚óã‚óã‚óã", "‚óè‚óè‚óè‚óã‚óã", "‚óè‚óè‚óè‚óè‚óã", "‚óè‚óè‚óè‚óè‚óè"];
        for (const step of steps.concat(steps).concat([lang ? '‡∂î‡∂∂‡∂ú‡∑ö ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä...' : 'Uploading your anime...'])) {
            await new Promise(res => setTimeout(res, 500));
            await conn.relayMessage(from, {
                protocolMessage: {
                    key: uploading.key,
                    type: 14,
                    editedMessage: { conversation: step }
                }
            }, {});
        }

        if (dl_link.includes("slanimeclub.co")) {
            await conn.sendMessage(from, {
                document: { url: dl_link },
                caption: `${title}\n\n${config.FOOTER}`,
                mimetype: "video/mp4",
                jpegThumbnail: await getThumbnailBuffer(config.LOGO),
                fileName: `${title}.mp4`
            });
        } else if (dl_link.includes("drive.google.com")) {
            const gdata = await GDriveDl(dl_link);
            await conn.sendMessage(from, {
                document: { url: gdata.downloadUrl },
                caption: `${gdata.fileName}\n\n${config.FOOTER}`,
                mimetype: gdata.mimetype,
                jpegThumbnail: await getThumbnailBuffer(config.LOGO),
                fileName: `${gdata.fileName}.mp4`
            });
        }

        await conn.sendMessage(from, { react: { text: '‚úÖ', key: mek.key } });
        reply(lang ? '‚úÖ ‡∂î‡∂∂‡∂ú‡∑ö ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∑Ä‡∑í‡∂∫' : '‚úÖ Your anime was successfully uploaded');
    } catch (e) {
        console.error('Download Error:', e);
        reply(lang ? '*‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑í‡∂∫.. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*' : '*Something went wrong.. please try again*');
    }
});  

